basePath: /api/v1
definitions:
  auth.AuthenticateBodyParams:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.AuthenticateResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  auth.PutPasswordBodyParams:
    properties:
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - password
    type: object
  auth.RefreshTokenBodyParams:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  event.EventBodyParams:
    properties:
      end_time:
        type: string
      repeated:
        enum:
        - never
        - daily
        - weekly
        - monthly
        - yearly
        type: string
      start_time:
        type: string
      timezone:
        type: string
      title:
        type: string
    required:
    - end_time
    - repeated
    - start_time
    - timezone
    - title
    type: object
  models.Event:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      deleted_at:
        type: string
      end_time:
        type: string
      id:
        type: string
      repeated:
        type: string
      start_time:
        type: string
      timezone:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.User:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  response.Error:
    properties:
      code:
        type: integer
      error: {}
      status:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
  user.PostBodyParams:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.PutBodyParams:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
info:
  contact:
    email: ushiradineth@gmail.com
    name: Ushira Dineth
    url: https://koano.app
  description: API for Koano.
  title: Koano
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate User with the parameters sent with the request
      parameters:
      - description: AuthenticateBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/auth.AuthenticateBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/auth.AuthenticateResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Authenticate User
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh Access Token with the parameters sent with the request
        based on the request based on the JWT
      parameters:
      - description: RefreshTokenBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/auth.RefreshTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Refresh Access Token
      tags:
      - Auth
  /auth/reset-password:
    put:
      consumes:
      - application/json
      description: Update authenticated user's Password with the parameters sent with
        the request based on the JWT
      parameters:
      - description: PutPasswordBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/auth.PutPasswordBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Update User Password
      tags:
      - Auth
  /events:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Get authenticated user's event based on the JWT sent with the request
      parameters:
      - in: query
        name: end_day
        required: true
        type: string
      - in: query
        name: start_day
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Get User Events
      tags:
      - Event
    post:
      consumes:
      - application/json
      description: Create Event based on the parameters sent with the request
      parameters:
      - description: EventBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/event.EventBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Create Event
      tags:
      - Event
  /events/{event_id}:
    delete:
      description: Delete Event based on the parameters sent with the request
      parameters:
      - in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Delete Event
      tags:
      - Event
    get:
      description: Get authenticated user's event based on the JWT and event ID sent
        with the request
      parameters:
      - in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Get Event by ID
      tags:
      - Event
    put:
      consumes:
      - application/json
      description: Update Event based on the parameters sent with the request
      parameters:
      - in: path
        name: event_id
        required: true
        type: string
      - description: EventBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/event.EventBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Event'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Update Event
      tags:
      - Event
  /users:
    post:
      consumes:
      - application/json
      description: Create User with the parameters sent with the request
      parameters:
      - description: PostBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/user.PostBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Create User
      tags:
      - User
  /users/{user_id}:
    delete:
      description: Delete authenticated User based on the JWT
      parameters:
      - in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - User
    get:
      description: Get authenticated user based on the JWT sent with the request
      parameters:
      - in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update authenticated User with the parameters sent with the request
        based on the JWT
      parameters:
      - in: path
        name: user_id
        required: true
        type: string
      - description: PutBodyParams
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/user.PutBodyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
